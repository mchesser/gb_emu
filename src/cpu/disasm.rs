//! This module is able to convert instructions into a textual representation

use mmu::Memory;

pub fn disasm(mut addr: u16, mem: &mut Memory) -> String {
    // Read the next byte after pc, useful for instructions requiring a `n` parameter
    macro_rules! get_n { () => ({ addr += 1; mem.lb(addr - 1) }) }
    // Read the next two bytes after pc, useful for instructions requiring a `nn` parameter
    macro_rules! get_nn { () => (get_n!() as u16 + (get_n!() as u16 << 8)) }

    let op = mem.lb(addr);
    addr += 1;

    match op {
        0x00 => format!("nop"),
        0x01 => format!("ld\tbc, {}", get_nn!()),
        0x02 => format!("ld\t(bc), a"),
        0x03 => format!("inc\tbc"),
        0x04 => format!("inc\tb"),
        0x05 => format!("dec\tb"),
        0x06 => format!("ld\tb, {}", get_n!()),
        0x07 => format!("rlca"),
        0x08 => format!("ld\t({}), sp", get_nn!()),
        0x09 => format!("add\thl, bc"),
        0x0A => format!("ld\ta, (bc)"),
        0x0B => format!("dec\tbc"),
        0x0C => format!("inc\tc"),
        0x0D => format!("dec\tc"),
        0x0E => format!("ld\tc, {}", get_n!()),
        0x0F => format!("rrca"),

        0x10 => format!("stop"),
        0x11 => format!("ld\tde, {}", get_nn!()),
        0x12 => format!("ld\t(de), a"),
        0x13 => format!("inc\tde"),
        0x14 => format!("inc\td"),
        0x15 => format!("dec\td"),
        0x16 => format!("ld\td, {}", get_n!()),
        0x17 => format!("rla"),
        0x18 => format!("jr\t{}", get_n!()),
        0x19 => format!("add\thl, de"),
        0x1A => format!("ld\ta, (de)"),
        0x1B => format!("dec\tde"),
        0x1C => format!("inc\te"),
        0x1D => format!("dec\te"),
        0x1E => format!("ld\te, {}", get_n!()),
        0x1F => format!("rra"),

        0x20 => format!("jr\tnz, {}", get_n!()),
        0x21 => format!("ld\thl, {}", get_nn!()),
        0x22 => format!("ld\t(hl), a"),
        0x23 => format!("inc\thl"),
        0x24 => format!("inc\th"),
        0x25 => format!("dec\th"),
        0x26 => format!("ld\th, {}", get_n!()),
        0x27 => format!("daa"),
        0x28 => format!("jr\tz, {}", get_n!()),
        0x29 => format!("add\thl, hl"),
        0x2A => format!("ld\ta, (hl)"),
        0x2B => format!("dec\thl"),
        0x2C => format!("inc\tl"),
        0x2D => format!("dec\tl"),
        0x2E => format!("ld\tl, {}", get_n!()),
        0x2F => format!("cpl"),
/*
        0x30 => { jr_ce!(!cflag!())       }, // 3;2
        0x31 => { ld_NNsp!();           3 },
        0x32 => { ldd_HLa!();           2 },
        0x33 => { inc_sp!();            2 },
        0x34 => { inc_HL!();            3 },
        0x35 => { dec_HL!();            3 },
        0x36 => { ld_DDn!(hl);          3 },
        0x37 => { scf!();               1 },
        0x38 => { jr_ce!(cflag!())        }, // 3;2
        0x39 => { add_hlsp!();          2 },
        0x3A => { ldd_aHL!();           2 },
        0x3B => { dec_sp!();            1 },
        0x3C => { inc_r!(a);            1 },
        0x3D => { dec_r!(a);            1 },
        0x3E => { ld_rn!(a);            2 },
        0x3F => { ccf!();               1 },

        0x40 => { ld!(b, b);            1 },
        0x41 => { ld!(b, c);            1 },
        0x42 => { ld!(b, d);            1 },
        0x43 => { ld!(b, e);            1 },
        0x44 => { ld!(b, h);            1 },
        0x45 => { ld!(b, l);            1 },
        0x46 => { ld_rDD!(b, hl)        2 },
        0x47 => { ld!(b, a);            1 },
        0x48 => { ld!(c, b);            1 },
        0x49 => { ld!(c, c);            1 },
        0x4A => { ld!(c, d);            1 },
        0x4B => { ld!(c, e);            1 },
        0x4C => { ld!(c, h);            1 },
        0x4D => { ld!(c, l);            1 },
        0x4E => { ld_rDD!(c, hl);       2 },
        0x4F => { ld!(c, a);            1 },

        0x50 => { ld!(d, b);            1 },
        0x51 => { ld!(d, c);            1 },
        0x52 => { ld!(d, d);            1 },
        0x53 => { ld!(d, e);            1 },
        0x54 => { ld!(d, h);            1 },
        0x55 => { ld!(d, l);            1 },
        0x56 => { ld_rDD!(d, hl)        2 },
        0x57 => { ld!(d, a);            1 },
        0x58 => { ld!(e, b);            1 },
        0x59 => { ld!(e, c);            1 },
        0x5A => { ld!(e, d);            1 },
        0x5B => { ld!(e, e);            1 },
        0x5C => { ld!(e, h);            1 },
        0x5D => { ld!(e, l);            1 },
        0x5E => { ld_rDD!(e, hl);       2 },
        0x5F => { ld!(e, a);            1 },

        0x60 => { ld!(h, b);            1 },
        0x61 => { ld!(h, c);            1 },
        0x62 => { ld!(h, d);            1 },
        0x63 => { ld!(h, e);            1 },
        0x64 => { ld!(h, h);            1 },
        0x65 => { ld!(h, l);            1 },
        0x66 => { ld_rDD!(h, hl)        2 },
        0x67 => { ld!(h, a);            1 },
        0x68 => { ld!(l, b);            1 },
        0x69 => { ld!(l, c);            1 },
        0x6A => { ld!(l, d);            1 },
        0x6B => { ld!(l, e);            1 },
        0x6C => { ld!(l, h);            1 },
        0x6D => { ld!(l, l);            1 },
        0x6E => { ld_rDD!(l, hl);       2 },
        0x6F => { ld!(l, a);            1 },

        0x70 => { ld_DDr!(hl, b);       2 },
        0x71 => { ld_DDr!(hl, c);       2 },
        0x72 => { ld_DDr!(hl, d);       2 },
        0x73 => { ld_DDr!(hl, e);       2 },
        0x74 => { ld_DDr!(hl, h);       2 },
        0x75 => { ld_DDr!(hl, l);       2 },
        0x76 => { halt!();              1 },
        0x77 => { ld_DDr!(hl, a);       2 },
        0x78 => { ld!(a, b);            1 },
        0x79 => { ld!(a, c);            1 },
        0x7A => { ld!(a, d);            1 },
        0x7B => { ld!(a, e);            1 },
        0x7C => { ld!(a, h);            1 },
        0x7D => { ld!(a, l);            1 },
        0x7E => { ld_rDD!(a, hl);       2 },
        0x7F => { ld!(a, a);            1 },

        0x80 => { add_ar!(b);           1 },
        0x81 => { add_ar!(c);           1 },
        0x82 => { add_ar!(d);           1 },
        0x83 => { add_ar!(e);           1 },
        0x84 => { add_ar!(h);           1 },
        0x85 => { add_ar!(l);           1 },
        0x86 => { add_aHL!();           2 },
        0x87 => { add_ar!(a);           1 },
        0x88 => { adc_ar!(b);           1 },
        0x89 => { adc_ar!(c);           1 },
        0x8A => { adc_ar!(d);           1 },
        0x8B => { adc_ar!(e);           1 },
        0x8C => { adc_ar!(h);           1 },
        0x8D => { adc_ar!(l);           1 },
        0x8E => { adc_aHL!();           2 },
        0x8F => { adc_ar!(a);           1 },

        0x90 => { sub_ar!(b);           1 },
        0x91 => { sub_ar!(c);           1 },
        0x92 => { sub_ar!(d);           1 },
        0x93 => { sub_ar!(e);           1 },
        0x94 => { sub_ar!(h);           1 },
        0x95 => { sub_ar!(l);           1 },
        0x96 => { sub_aHL!();           2 },
        0x97 => { sub_ar!(a);           1 },
        0x98 => { sbc_ar!(b);           1 },
        0x99 => { sbc_ar!(c);           1 },
        0x9A => { sbc_ar!(d);           1 },
        0x9B => { sbc_ar!(e);           1 },
        0x9C => { sbc_ar!(h);           1 },
        0x9D => { sbc_ar!(l);           1 },
        0x9E => { sbc_aHL!();           2 },
        0x9F => { sbc_ar!(a);           1 },

        0xA0 => { and_ar!(b);           1 },
        0xA1 => { and_ar!(c);           1 },
        0xA2 => { and_ar!(d);           1 },
        0xA3 => { and_ar!(e);           1 },
        0xA4 => { and_ar!(h);           1 },
        0xA5 => { and_ar!(l);           1 },
        0xA6 => { and_aHL!();           2 },
        0xA7 => { and_ar!(a);           1 },
        0xA8 => { xor_ar!(b);           1 },
        0xA9 => { xor_ar!(c);           1 },
        0xAA => { xor_ar!(d);           1 },
        0xAB => { xor_ar!(e);           1 },
        0xAC => { xor_ar!(h);           1 },
        0xAD => { xor_ar!(l);           1 },
        0xAE => { xor_aHL!();           2 },
        0xAF => { xor_ar!(a);           1 },

        0xB0 => { or_ar!(b);            1 },
        0xB1 => { or_ar!(c);            1 },
        0xB2 => { or_ar!(d);            1 },
        0xB3 => { or_ar!(e);            1 },
        0xB4 => { or_ar!(h);            1 },
        0xB5 => { or_ar!(l);            1 },
        0xB6 => { or_aHL!();            2 },
        0xB7 => { or_ar!(a);            1 },
        0xB8 => { cp_ar!(b);            1 },
        0xB9 => { cp_ar!(c);            1 },
        0xBA => { cp_ar!(d);            1 },
        0xBB => { cp_ar!(e);            1 },
        0xBC => { cp_ar!(h);            1 },
        0xBD => { cp_ar!(l);            1 },
        0xBE => { cp_aHL!();            2 },
        0xBF => { cp_ar!(a);            1 },
*/
        0xC0 => format!("ret\tnz"),
        0xC1 => format!("pop\tbc"),
        0xC2 => format!("jp\tnz, {:X}h", get_nn!()),
        0xC3 => format!("jp\t{:X}h", get_nn!()),
        0xC4 => format!("call\tnz, {:X}h", get_nn!()),
        0xC5 => format!("push\tbc"),
        0xC6 => format!("add\ta, {}", get_nn!()),
        0xC7 => format!("rst\t00h"),
        0xC8 => format!("ret\tz"),
        0xC9 => format!("ret"),
        0xCA => format!("jp\tz, {:X}h", get_nn!()),
        // 0xCB => disasm_long(cpu, mem),
        0xCC => format!("call\tz, {:X}h", get_nn!()),
        0xCD => format!("call\t{:X}h", get_nn!()),
        0xCE => format!("adc\ta, {:X}h", get_n!()),
        0xCF => format!("rst\t08h"),
/*
        0xD0 => { ret_c!(!cflag!())       }, // 5;2
        0xD1 => { pop_qq!(de);          3 },
        0xD2 => { jp_cnn!(!cflag!())      }, // 4;3
        0xD3 => cpu.invalid_inst(op),
        0xD4 => { call_cnn!(!cflag!())    }, // 6;3
        0xD5 => { push_qq!(de);         3 },
        0xD6 => { sub_an!();            2 },
        0xD7 => { rst_p!(0x10);         4 },
        0xD8 => { ret_c!(cflag!())        }, // 5;2
        0xD9 => { reti!();              4 },
        0xDA => { jp_cnn!(cflag!())       }, // 4;3
        0xDB => cpu.invalid_inst(op),
        0xDC => { call_cnn!(cflag!())     }, // 6;3
        0xDD => cpu.invalid_inst(op),
        0xDE => { sbc_an!();            2 },
        0xDF => { rst_p!(0x18);         4 },

        0xE0 => { ld_IOan!();           3 },
        0xE1 => { pop_qq!(hl);          3 },
        0xE2 => { ld_IOca!();           2 },
        0xE3 => cpu.invalid_inst(op),
        0xE4 => cpu.invalid_inst(op),
        0xE5 => { push_qq!(hl);         3 },
        0xE6 => { and_an!();            2 },
        0xE7 => { rst_p!(0x20);         4 },
        0xE8 => { add_spn!();           4 },
        0xE9 => { jp_hl!();             1 },
        0xEA => { ld_NNr!(a);           4 },
        0xEB => cpu.invalid_inst(op),
        0xEC => cpu.invalid_inst(op),
        // The GB processor does not include the ED set of instructions from the z80 processor
        0xED => cpu.invalid_inst(op),
        0xEE => { xor_an!();            2 },
        0xEF => { rst_p!(0x28);         4 },

        0xF0 => { ld_aIOn!();           3 },
        0xF1 => { pop_qq!(af);          3 },
        0xF2 => { ld_aIOc!();           2 },
        0xF3 => { di!();                1 },
        0xF4 => cpu.invalid_inst(op),
        0xF5 => { push_qq!(af);         3 },
        0xF6 => { or_an!();             2 },
        0xF7 => { rst_p!(0x30);         4 },
        0xF8 => { ld_hlspn!();          3 },
        0xF9 => { ld_sphl!();           2 },
        0xFA => { ld_rNN!(a);           4 },
        0xFB => { ei!();                1 },
        0xFC => cpu.invalid_inst(op),
        0xFD => cpu.invalid_inst(op),
        0xFE => { cp_an!();             2 },
        0xFF => { rst_p!(0x38);         4 },*/

        _ => format!("0x{:2X}", op),
        // _ => unreachable!()
    }
}

/*
fn disasm_long(addr: u16, mem: &mut Memory) {
    let op = mem.lb(addr);

    match op {
        0x00 => { rlc_r!(b);            2 },
        0x01 => { rlc_r!(c);            2 },
        0x02 => { rlc_r!(d);            2 },
        0x03 => { rlc_r!(e);            2 },
        0x04 => { rlc_r!(h);            2 },
        0x05 => { rlc_r!(l);            2 },
        0x06 => { rlc_HL!();            4 },
        0x07 => { rlc_r!(a);            2 },
        0x08 => { rrc_r!(b);            2 },
        0x09 => { rrc_r!(c);            2 },
        0x0A => { rrc_r!(d);            2 },
        0x0B => { rrc_r!(e);            2 },
        0x0C => { rrc_r!(h);            2 },
        0x0D => { rrc_r!(l);            2 },
        0x0E => { rrc_HL!();            4 },
        0x0F => { rrc_r!(a);            2 },

        0x10 => { rl_r!(b);             2 },
        0x11 => { rl_r!(c);             2 },
        0x12 => { rl_r!(d);             2 },
        0x13 => { rl_r!(e);             2 },
        0x14 => { rl_r!(h);             2 },
        0x15 => { rl_r!(l);             2 },
        0x16 => { rl_HL!();             4 },
        0x17 => { rl_r!(a);             2 },
        0x18 => { rr_r!(b);             2 },
        0x19 => { rr_r!(c);             2 },
        0x1A => { rr_r!(d);             2 },
        0x1B => { rr_r!(e);             2 },
        0x1C => { rr_r!(h);             2 },
        0x1D => { rr_r!(l);             2 },
        0x1E => { rr_HL!();             4 },
        0x1F => { rr_r!(a);             2 },

        0x20 => { sla_r!(b);            2 },
        0x21 => { sla_r!(c);            2 },
        0x22 => { sla_r!(d);            2 },
        0x23 => { sla_r!(e);            2 },
        0x24 => { sla_r!(h);            2 },
        0x25 => { sla_r!(l);            2 },
        0x26 => { sla_HL!();            4 },
        0x27 => { sla_r!(a);            2 },
        0x28 => { sra_r!(b);            2 },
        0x29 => { sra_r!(c);            2 },
        0x2A => { sra_r!(d);            2 },
        0x2B => { sra_r!(e);            2 },
        0x2C => { sra_r!(h);            2 },
        0x2D => { sra_r!(l);            2 },
        0x2E => { sra_HL!();            4 },
        0x2F => { sra_r!(a);            2 },

        0x30 => { swap_r!(b);           2 },
        0x31 => { swap_r!(c);           2 },
        0x32 => { swap_r!(d);           2 },
        0x33 => { swap_r!(e);           2 },
        0x34 => { swap_r!(h);           2 },
        0x35 => { swap_r!(l);           2 },
        0x36 => { swap_HL!();           4 },
        0x37 => { swap_r!(a);           2 },
        0x38 => { srl_r!(b);            2 },
        0x39 => { srl_r!(c);            2 },
        0x3A => { srl_r!(d);            2 },
        0x3B => { srl_r!(e);            2 },
        0x3C => { srl_r!(h);            2 },
        0x3D => { srl_r!(l);            2 },
        0x3E => { srl_HL!();            4 },
        0x3F => { srl_r!(a);            2 },

        0x40 => { bit_br!(0, b);        2 },
        0x41 => { bit_br!(0, c);        2 },
        0x42 => { bit_br!(0, d);        2 },
        0x43 => { bit_br!(0, e);        2 },
        0x44 => { bit_br!(0, h);        2 },
        0x45 => { bit_br!(0, l);        2 },
        0x46 => { bit_bHL!(0);          3 },
        0x47 => { bit_br!(0, a);        2 },
        0x48 => { bit_br!(1, b);        2 },
        0x49 => { bit_br!(1, c);        2 },
        0x4A => { bit_br!(1, d);        2 },
        0x4B => { bit_br!(1, e);        2 },
        0x4C => { bit_br!(1, h);        2 },
        0x4D => { bit_br!(1, l);        2 },
        0x4E => { bit_bHL!(1);          3 },
        0x4F => { bit_br!(1, a);        2 },

        0x50 => { bit_br!(2, b);        2 },
        0x51 => { bit_br!(2, c);        2 },
        0x52 => { bit_br!(2, d);        2 },
        0x53 => { bit_br!(2, e);        2 },
        0x54 => { bit_br!(2, h);        2 },
        0x55 => { bit_br!(2, l);        2 },
        0x56 => { bit_bHL!(2);          3 },
        0x57 => { bit_br!(2, a);        2 },
        0x58 => { bit_br!(3, b);        2 },
        0x59 => { bit_br!(3, c);        2 },
        0x5A => { bit_br!(3, d);        2 },
        0x5B => { bit_br!(3, e);        2 },
        0x5C => { bit_br!(3, h);        2 },
        0x5D => { bit_br!(3, l);        2 },
        0x5E => { bit_bHL!(3);          3 },
        0x5F => { bit_br!(3, a);        2 },

        0x60 => { bit_br!(4, b);        2 },
        0x61 => { bit_br!(4, c);        2 },
        0x62 => { bit_br!(4, d);        2 },
        0x63 => { bit_br!(4, e);        2 },
        0x64 => { bit_br!(4, h);        2 },
        0x65 => { bit_br!(4, l);        2 },
        0x66 => { bit_bHL!(4);          3 },
        0x67 => { bit_br!(4, a);        2 },
        0x68 => { bit_br!(5, b);        2 },
        0x69 => { bit_br!(5, c);        2 },
        0x6A => { bit_br!(5, d);        2 },
        0x6B => { bit_br!(5, e);        2 },
        0x6C => { bit_br!(5, h);        2 },
        0x6D => { bit_br!(5, l);        2 },
        0x6E => { bit_bHL!(5);          3 },
        0x6F => { bit_br!(5, a);        2 },

        0x70 => { bit_br!(6, b);        2 },
        0x71 => { bit_br!(6, c);        2 },
        0x72 => { bit_br!(6, d);        2 },
        0x73 => { bit_br!(6, e);        2 },
        0x74 => { bit_br!(6, h);        2 },
        0x75 => { bit_br!(6, l);        2 },
        0x76 => { bit_bHL!(6);          3 },
        0x77 => { bit_br!(6, a);        2 },
        0x78 => { bit_br!(7, b);        2 },
        0x79 => { bit_br!(7, c);        2 },
        0x7A => { bit_br!(7, d);        2 },
        0x7B => { bit_br!(7, e);        2 },
        0x7C => { bit_br!(7, h);        2 },
        0x7D => { bit_br!(7, l);        2 },
        0x7E => { bit_bHL!(7);          3 },
        0x7F => { bit_br!(7, a);        2 },

        0x80 => { res_br!(0, b);        2 },
        0x81 => { res_br!(0, c);        2 },
        0x82 => { res_br!(0, d);        2 },
        0x83 => { res_br!(0, e);        2 },
        0x84 => { res_br!(0, h);        2 },
        0x85 => { res_br!(0, l);        2 },
        0x86 => { res_bHL!(0);          4 },
        0x87 => { res_br!(0, a);        2 },
        0x88 => { res_br!(1, b);        2 },
        0x89 => { res_br!(1, c);        2 },
        0x8A => { res_br!(1, d);        2 },
        0x8B => { res_br!(1, e);        2 },
        0x8C => { res_br!(1, h);        2 },
        0x8D => { res_br!(1, l);        2 },
        0x8E => { res_bHL!(1);          4 },
        0x8F => { res_br!(1, a);        2 },

        0x90 => { res_br!(2, b);        2 },
        0x91 => { res_br!(2, c);        2 },
        0x92 => { res_br!(2, d);        2 },
        0x93 => { res_br!(2, e);        2 },
        0x94 => { res_br!(2, h);        2 },
        0x95 => { res_br!(2, l);        2 },
        0x96 => { res_bHL!(2);          4 },
        0x97 => { res_br!(2, a);        2 },
        0x98 => { res_br!(3, b);        2 },
        0x99 => { res_br!(3, c);        2 },
        0x9A => { res_br!(3, d);        2 },
        0x9B => { res_br!(3, e);        2 },
        0x9C => { res_br!(3, h);        2 },
        0x9D => { res_br!(3, l);        2 },
        0x9E => { res_bHL!(3);          4 },
        0x9F => { res_br!(3, a);        2 },

        0xA0 => { res_br!(4, b);        2 },
        0xA1 => { res_br!(4, c);        2 },
        0xA2 => { res_br!(4, d);        2 },
        0xA3 => { res_br!(4, e);        2 },
        0xA4 => { res_br!(4, h);        2 },
        0xA5 => { res_br!(4, l);        2 },
        0xA6 => { res_bHL!(4);          4 },
        0xA7 => { res_br!(4, a);        2 },
        0xA8 => { res_br!(5, b);        2 },
        0xA9 => { res_br!(5, c);        2 },
        0xAA => { res_br!(5, d);        2 },
        0xAB => { res_br!(5, e);        2 },
        0xAC => { res_br!(5, h);        2 },
        0xAD => { res_br!(5, l);        2 },
        0xAE => { res_bHL!(5);          4 },
        0xAF => { res_br!(5, a);        2 },

        0xB0 => { res_br!(6, b);        2 },
        0xB1 => { res_br!(6, c);        2 },
        0xB2 => { res_br!(6, d);        2 },
        0xB3 => { res_br!(6, e);        2 },
        0xB4 => { res_br!(6, h);        2 },
        0xB5 => { res_br!(6, l);        2 },
        0xB6 => { res_bHL!(6);          4 },
        0xB7 => { res_br!(6, a);        2 },
        0xB8 => { res_br!(7, b);        2 },
        0xB9 => { res_br!(7, c);        2 },
        0xBA => { res_br!(7, d);        2 },
        0xBB => { res_br!(7, e);        2 },
        0xBC => { res_br!(7, h);        2 },
        0xBD => { res_br!(7, l);        2 },
        0xBE => { res_bHL!(7);          4 },
        0xBF => { res_br!(7, a);        2 },

        0xC0 => { set_br!(0, b);        2 },
        0xC1 => { set_br!(0, c);        2 },
        0xC2 => { set_br!(0, d);        2 },
        0xC3 => { set_br!(0, e);        2 },
        0xC4 => { set_br!(0, h);        2 },
        0xC5 => { set_br!(0, l);        2 },
        0xC6 => { set_bHL!(0);          4 },
        0xC7 => { set_br!(0, a);        2 },
        0xC8 => { set_br!(1, b);        2 },
        0xC9 => { set_br!(1, c);        2 },
        0xCA => { set_br!(1, d);        2 },
        0xCB => { set_br!(1, e);        2 },
        0xCC => { set_br!(1, h);        2 },
        0xCD => { set_br!(1, l);        2 },
        0xCE => { set_bHL!(1);          4 },
        0xCF => { set_br!(1, a);        2 },

        0xD0 => { set_br!(2, b);        2 },
        0xD1 => { set_br!(2, c);        2 },
        0xD2 => { set_br!(2, d);        2 },
        0xD3 => { set_br!(2, e);        2 },
        0xD4 => { set_br!(2, h);        2 },
        0xD5 => { set_br!(2, l);        2 },
        0xD6 => { set_bHL!(2);          4 },
        0xD7 => { set_br!(2, a);        2 },
        0xD8 => { set_br!(3, b);        2 },
        0xD9 => { set_br!(3, c);        2 },
        0xDA => { set_br!(3, d);        2 },
        0xDB => { set_br!(3, e);        2 },
        0xDC => { set_br!(3, h);        2 },
        0xDD => { set_br!(3, l);        2 },
        0xDE => { set_bHL!(3);          4 },
        0xDF => { set_br!(3, a);        2 },

        0xE0 => { set_br!(4, b);        2 },
        0xE1 => { set_br!(4, c);        2 },
        0xE2 => { set_br!(4, d);        2 },
        0xE3 => { set_br!(4, e);        2 },
        0xE4 => { set_br!(4, h);        2 },
        0xE5 => { set_br!(4, l);        2 },
        0xE6 => { set_bHL!(4);          4 },
        0xE7 => { set_br!(4, a);        2 },
        0xE8 => { set_br!(5, b);        2 },
        0xE9 => { set_br!(5, c);        2 },
        0xEA => { set_br!(5, d);        2 },
        0xEB => { set_br!(5, e);        2 },
        0xEC => { set_br!(5, h);        2 },
        0xED => { set_br!(5, l);        2 },
        0xEE => { set_bHL!(5);          4 },
        0xEF => { set_br!(5, a);        2 },

        0xF0 => { set_br!(6, b);        2 },
        0xF1 => { set_br!(6, c);        2 },
        0xF2 => { set_br!(6, d);        2 },
        0xF3 => { set_br!(6, e);        2 },
        0xF4 => { set_br!(6, h);        2 },
        0xF5 => { set_br!(6, l);        2 },
        0xF6 => { set_bHL!(6);          4 },
        0xF7 => { set_br!(6, a);        2 },
        0xF8 => { set_br!(7, b);        2 },
        0xF9 => { set_br!(7, c);        2 },
        0xFA => { set_br!(7, d);        2 },
        0xFB => { set_br!(7, e);        2 },
        0xFC => { set_br!(7, h);        2 },
        0xFD => { set_br!(7, l);        2 },
        0xFE => { set_bHL!(7);          4 },
        0xFF => { set_br!(7, a);        2 },

        _ => unreachable!()
    }
}
*/

