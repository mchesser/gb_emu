//! A module for interpreting symbols generated by rgblink

use std::collections::HashMap;
use std::num::from_str_radix;

pub type SymbolTable = HashMap<(u8, u16), String>;

/// Build a hash map that maps the addresses and bank numbers to label names    
pub fn build_symbol_table(input: &str) -> SymbolTable {
    let mut table = HashMap::new();
    
    for line in input.lines() {
        let line = line.trim_left();
        if line.len() == 0 || line.starts_with(";") {
            continue;
        }

        // FIXME(minor): Add some error handling here
        let split_line: Vec<_> = line.split(' ').collect();
        let keys: Vec<_> = split_line[0].split(':').collect();
        
        let key = (from_str_radix(keys[0], 16).unwrap(), from_str_radix(keys[1], 16).unwrap());
        let value = split_line[1].trim_left().into_string();
        
        table.insert(key, value);        
    }

    table
}
